# Setup

In order to create or manage all the webrtc connections, all you need is three lines of code.

```js
const bun = new Bun({ apiKey: 'b2eb6c26-8695-45f2-8626-c08bebc83c56', room: 'abcdef' })
bun.on('new-peer', (event) => console.log("New Peer", event, bun.peers))
bun.on("peer-left", (peer_id) => console.log(peer_id))
```

On the first line, we create a **bun** object which is used to handle events, which occur. Once an an object is created by providing desired options, which include:

```js
const bun = new Bun({
    apiKey: 'YOUR_API_KEY_GOES_HERE',
    room: 'ROOM_NAME',
    hasVideo: true, // true if camera on.
    hasAudio: true, // true if mics on.
})
```

Once the object is created, the bun object contacts the signalling server and joins the room. If the peers have already joined the room,  it creates fresh peer connections and local media. Once successful peer connection is established then it fires,

```js
bun.on('new-peer', (event) => { /** Your Function code goes here. */ })
```

Here, event contains the peer connection object. You can add DOM element, or a video element, when a new peer is added.

Similarly, whenever a peer leaves,

```js
bun.on("peer-left", (peer_id) => { /** Your Function code goes here. */ })
```
